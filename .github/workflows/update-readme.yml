name: Update README with Directory Tree

on:
  push:
    branches: [ main ]  # Trigger on pushes to main branch
  workflow_dispatch:  # Allow manual trigger via Actions tab

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install tree
      run: sudo apt-get update && sudo apt-get install -y tree

    - name: Generate directory tree
      run: tree -a -I '.git|node_modules|build|dist|venv|.github' -L 3 > tree.txt

    - name: Ensure README exists with minimal format
      run: |
        if [ ! -f README.md ]; then
          cat << 'EOF' > README.md
        # IC Design Study Repository

        Study materials and code for Integrated Circuit (IC) design, covering interviews, knowledge areas, RTL design, and software development.

        ## Project Structure
        ```text
        Placeholder for directory tree
        ```
        EOF
        fi
        
        # Ensure Project Structure section exists
        if ! grep -q "## Project Structure" README.md; then
          echo -e "\n## Project Structure\n\`\`\`text\nPlaceholder for directory tree\n\`\`\`" >> README.md
        fi

    - name: Update Project Structure section in README
      run: |
        # Create a temporary file with the tree content
        TREE_CONTENT=$(cat tree.txt)
        
        # Use Python to safely update the README
        python3 << 'EOF'
        import re
        
        # Read the current README
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Read the tree content
        with open('tree.txt', 'r') as f:
            tree_content = f.read().strip()
        
        # Pattern to match the Project Structure section
        pattern = r'(## Project Structure\n)```text\n.*?\n```'
        replacement = f'\\1```text\n{tree_content}\n```'
        
        # Replace the section
        new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)
        
        # Write back to file
        with open('README.md', 'w') as f:
            f.write(new_content)
        EOF

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Auto-update README with directory tree"
        git push